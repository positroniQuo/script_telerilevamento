# Practice for exam               
	
# First I need a package to operate with raster data. For this I install the "raster" package, and then make it useable via the function "library"

install.packages("raster")
library(raster)

# Then i need a working directory for our code, data and outputs to go, so we create one eand we set it to be used by this code

setwd("C:/lab_2/")

# I import my first landsat raster image. To do this we use the "brick" function, that imports the image with all layers

l2011 <- brick("p224r63_2011.grd")

# Lest's check how the import went

l2011

# These are some of the bands landsat ETM+ images have, depending on the wavelenght registered:
# b1 = blue
# b2 = green
# b3 = red
# b4 = NIR, or Near InfraRed
# Some wavelenghts are useful for specific analysis', like NIR, which is reflected off vegetation.

# Now I look at the actual image: one of the easyest options is to use the "plot"  function

plot(l2011)     

# I assign colors other than the default ones 

cl <- colorRampPalette(c("black", "grey", "light grey")) (100)  
plot(l2011, col=cl) 

# I can choose to plot a single band selecting it: there are different ways, here are two

plot(l2011$B1_sre)

#or

plot(l2011[[1]])

# I switch colours and plot just the first band (blue) again

clb <- colorRampPalette(c("dark blue", "blue", "light blue")) (100)

plot(l2011[[1]])

# Here is the export of the image both in pdf and png formats.
#Dev.off() is a very useful function that both closes all images open and, if specified, completes an import (such as in this case)

pdf("banda1.pdf")
plot(l2011$B1_sre, col=clb)
dev.off()

png("banda1.png")
plot(l2011$B1_sre, col=clb)
dev.off()

# Let's visualize both the first and secon bands together. I have to specify how many images i want to be shown in a matrix, using the "par" function

clg <- colorRampPalette(c("dark green", "green", "light green")) (100)

par(mfrow=c(1,2))
plot(l2011$B1_sre, col=clb)
plot(l2011$B2_sre, col=clg)

dev.off()

# I now export multiframe plot

pdf("multiframe.pdf")
par(mfrow=c(1,2))
plot(l2011$B1_sre, col=clb)
plot(l2011$B2_sre, col=clg)
dev.off()

# We can use par to visualize all the first 4 bands at the same time

par(mfrow=c(2,2))
# blue
plot(l2011$B1_sre, col=clb)
# green
plot(l2011$B2_sre, col=clg)
# red
clr <- colorRampPalette(c("dark red", "red", "pink")) (100)
plot(l2011$B3_sre, col=clr)
# NIR
clnir <- colorRampPalette(c("red", "orange", "yellow")) (100)
plot(l2011$B4_sre, col=clnir)

dev.off()

# There is a function that plots images using the 3 primary colours (red, green and blue), with any band you decide.
# Here I assign the corresponding band to each colour to obtain an accurate representation of what the naked eye can see

plotRGB(l2011, r=3, g=2, b=1, stretch="lin")

# I can also assign bands not corresponding to the colour, and have different stretch

plotRGB(l2011, r=3, g=4, b=2, stretch="hist")

# Quantity of bits in an image = radiometric resolution

par(mfrow=c(1,2))
plotRGB(l2011, r=3, g=2, b=1, stretch="lin")
plotRGB(l2011, r=3, g=4, b=2, stretch="hist")

# Importing the images from 1988

l1988 <- brick("p224r63_1988.grd")

# I can now easily visually compare images from two different dates

par(mfrow=c(2,1))
plotRGB(l1988, r=4, g=3, b=2, stretch="lin")
plotRGB(l2011, r=4, g=3, b=2, stretch="lin")

# I will now install and use another package called "RStoolbox", that enhances R with many utility functions. 
# It will be useful later

install.packages("RStoolbox")
library(RStoolbox)

# I can use "brick" to import a .jpg image as well
# Let's visualize two images from the same site, but 14 years apart from each other, with "par" and "plotRGB"

l1992 <- brick("defor1_.jpg")

l1992 

# layer 1 = NIR
# layer 2 = red
# layer 3 = green

plotRGB(l1992, r=1, g=2, b=3, stretch="lin")

l2006 <- brick("defor2_.jpg")

l2006

plotRGB(l2006, r=1, g=2, b=3, stretch="lin")

par(mfrow=c(2,1))
plotRGB(l1992, r=1, g=2, b=3, stretch="lin")
plotRGB(l2006, r=1, g=2, b=3, stretch="lin")

# The DVI, or Difference Vegetation Index, is useful to visualize vegetation in an area, 
# since tipically the ground absorbs less PAR (Photosintetically Active Radiation) and more NIR radiation, and vice versa for plant-covered areas,
# thought this is not always the case (for example this is generally more true for wet soils rather than dry ones), and it is prone to interferences as clouds.
# the DVI is simply calculated subtracting values for the red reflecance from the NIR one in every pixel. This is easily done writing it as an equation

dvi1992 = l1992[[1]] - l1992[[2]]
# or:
# dvi1992 = l1992$defor1_.1 - l1992$defor1_.2

# We can now visualize the values obtained

dvi1992

cl <- colorRampPalette(c('darkblue','yellow','red','black'))(100)
plot(dvi1992, col=cl)

# Repeating the procedure with the other image from 2006

dvi2006 = l2006[[1]] - l2006[[2]]

dvi2006

# Besides having a visual on the vegetation cover, we can use this simple index to also compare images.
# I will now visualize calculate the difference between the two indexes

dvi_diff = dvi1992 - dvi2006

cld <- colorRampPalette(c('blue','white','red'))(100)
plot(dvi_dif, col=cld)

# As we can see this can be very useful in this case, but there are limits:
# we cannot effectively compare two DVI images with different resolutions, since values would not be compatible.
# to deal with this problem a much more useful, yet still simple index can be used.
# The NDVI (N is for normalized) is calculated with this formula:
# NDVI = DVI / NIR reflectance + Red reflectance
# the value obtained ranges from -1 to +1, therefore becomes comparable between other images taken in different resolutions

ndvi1992 = dvi1992 / (l1992[[1]] + l1992[[2]])

ndvi1992

ndvi2006 = dvi2006 / (l2006[[1]] + l2006[[2]])

ndvi2006


# It is now much easyer to showcase the differences in vegetation cover

par(mfrow=c(2,1))
plot(ndvi1992, col=cl)
plot(ndvi2006, col=cl)

# There is a shortcut to many useful indexes that can be used, thought when doing so some results may be offset if corrections 
# aren't made when imputing the image when needed.

si1992 <- spectralIndices(l1992, green=3, red=2, nir=1)

plot(si1992,col=cl)

# The following actions will be placed in a separated subfolder

setwd("C:/lab_2/greenland")

# Importing images taken from Greenland
# TIF (Tagged Image File) files can be imported with the raster function
 
lst_2000 <- raster("lst_2000.tif")
lst_2005 <- raster("lst_2005.tif")
lst_2010 <- raster("lst_2010.tif")
lst_2015 <- raster("lst_2015.tif")

par(mfrow=c(2,2))
plot(lst_2000)
plot(lst_2005)
plot(lst_2010)
plot(lst_2015)

# When we work with many files, often from the same source, it can be useful to use auto sorting/selecting functions.

rlist <- list.files(pattern="lst") # "pattern" indicates a set of characters repeated inside every file we want to list

rlist

# So now i can do what i did before in one simple action

import <- lapply(rlist,raster) # lapply( >object i neeed to apply a function to< , >the function to apply<)

import

# Let's unify all our images inside a single object whith "stack"

TGr <- stack(import) 

TGr

# I will plot different combinations of color-wavelenghts range

plotRGB(TGr, 1, 2, 3, stretch="Lin")
plotRGB(TGr, 2, 3, 4, stretch="Lin")
plotRGB(TGr, 4, 3, 2, stretch="Lin")

cl <- colorRampPalette(c("blue","light blue","pink","red"))(100)
plot(TGr, col=cl)

# Another example, this time with data coming from images showing air pollution during quarantine times in China

setwd("C:/lab_2/en") 

rlist <- list.files(pattern="EN")

rimp <- lapply(rlist, raster)

en <- stack(rimp)

cl <- colorRampPalette(c('red','orange','yellow'))(100) 

plot(en, col=cl)

# Here is the procedure to extract single elements from our stack

par(mfrow=c(1,2))
plot(en[[1]], col=cl)
plot(en[[13]], col=cl)

# Comparing the first to the last image using a simple subtraction

difen <- en[[1]] - en[[13]]
cldif <- colorRampPalette(c('blue','white','red'))(100) #
plot(difen, col=cldif)
