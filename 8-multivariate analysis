# Multivariate analysis is based on the capability to summarize the most info possible into a PCA (Principal Component Analysis)
# This grants the ability to reduce a N dimentional system into a monodimensional one while losing the less information possible.
# This is done tracing one axis in the zone where most of the variability occurs (PC1). 
# The standard deviation around the axis gives us info on most of the initial set of data

setwd("C:/lab")

library(raster)  
library(RStoolbox) # Tools for multivariate analysis  
library(ggplot2)   
library(patchwork)  
library(viridis)

# Images of the Parakanã indigenous reserve

p224r63_2011 <- brick("p224r63_2011_masked.grd")

plot(p224r63_2011)

p224r63_2011

plot(p224r63_2011$B1_sre, p224r63_2011$B2_sre, col="red", pch=19, cex=2)
plot(p224r63_2011$B2_sre, p224r63_2011$B1_sre, col="red", pch=19, cex=2)

pairs(p224r63_2011)

# aggregate cells resamples values from groups of cells (by a factor of 10 in this case, or matrixes of 10x10) giving away a summarized univocal value, 
# therefore downscaling resolution and making the image less difficult to process 

p224r63_2011res <- aggregate(p224r63_2011, fact=10)

par(mfrow=c(2,1))
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="lin")
plotRGB(p224r63_2011res, r=4, g=3, b=2, stretch="lin")

# Now we can get the PCA

p224r63_2011res_pca <- rasterPCA(p224r63_2011res)

summary(p224r63_2011res_pca$model)

# dev.off()
plotRGB(p224r63_2011res_pca$map, r=1, g=2, b=3, stretch="lin")

# Let's do the same on Similaun's glacier

sen <- brick("sentinel.png")

# Green = NIR band

ggRGB(sen, 2, 1, 3, stretch="lin") 

sen_PCA <- rasterPCA(sen)

# Info on variability summmarized by components of the PCA

summary(sen_PCA$model)

# Visual rendering of the same info

plot(sen_PCA$map)

# I just analyze the first 3 components since the 4th is just control

pc1 <- sen_PCA$map$PC1
pc2 <- sen_PCA$map$PC2
pc3 <- sen_PCA$map$PC3

# Si assegnano a variabili i plot delle tre componenti. 
g1 <- ggplot() +
  geom_raster(pc1, mapping=aes(x=x, y=y, fill=PC1))
g2 <- ggplot() +
  geom_raster(pc2, mapping=aes(x=x, y=y, fill=PC2))
g3 <- ggplot() +
  geom_raster(pc3, mapping=aes(x=x, y=y, fill=PC3))

# Patchwork dei tre grafici. 
g1+g2+g3

# Sull'immagine della PC1 si applica il calcolo della deviazione standard.
sd3 <- focal(pc1, matrix(1/9, 3, 3), fun=sd)
# Finestra mobile 3x3, calcolo della deviazione standard. 
 
# Plot del risultato utilizzando il pacchetto Viridis per la visualizzazione. 
ggplot() +
  geom_raster(sd3, mapping=aes(x=x, y=y, fill=layer)) +
  scale_fill_viridis(option = "inferno")

# Confronto.
# RGB
im1 <- ggRGB(sen, 2, 1, 3)

# PC1
im2 <- ggplot() +
  geom_raster(pc1, mapping=aes(x=x, y=y, fill=PC1))

# Deviazione standard sulla PC1
im3 <- ggplot() +
  geom_raster(sd3, mapping=aes(x=x, y=y, fill=layer)) +
  scale_fill_viridis(option="inferno")              

# Patchwork finale. 
im1 + im2 + im3              

# Calcolo eterogeneità in 5x5 e assegnazione a variabile. 
sd5<- focal(pc1, matrix(1/25, 5, 5), fun=sd)    
im4 <- ggplot() +
  geom_raster(sd5, mapping=aes(x=x, y=y, fill=layer)) +
  scale_fill_viridis(option = "inferno")
 
# Calcolo eterogeneità in 7x7 e assegnazione a variabile. 
sd7<- focal(pc1, matrix(1/49, 7, 7), fun=sd)    
im5 <- ggplot() +
  geom_raster(sd7, mapping=aes(x=x, y=y, fill=layer)) +
  scale_fill_viridis(option = "inferno")

# Confronto: il livello di dettaglio è inferiore aumentando le dimensioni della finestra mobile. 
im3 + im4 + im5
